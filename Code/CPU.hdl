
CHIP CPU {

    IN  inM[16],      // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
// Starting Mux

	Not(in=instruction[15],out=p);  
	Mux16(a=outtM,b=instruction,sel=p,out=AM);  

// Starting Mux
  

//A reg

	Or(a=p,b=instruction[5],out=o);  
	Register(in=AM,load=o,out=outA,out[0..14]=addressM); 

//A reg


//ALU before mux

	And(a=instruction[15],b=instruction[12],out=m);
	Mux16(a=outA,b=inM,sel=m,out=y);

 //ALU before mux


//D reg

	And(a=instruction[15],b=instruction[4],out=n);
	Register(in=outtM,load=n,out=x);
	
//D reg


//ALU

ALU(x=x,y=y,zx=instruction[11],nx=instruction[10],ny=instruction[8],zy=instruction[9],f=instruction[7],no=instruction[6],out=outtM,out=outM,zr=zr,ng=ng);

//ALU


And(a=instruction[15],b=instruction[3],out=writeM); // writeM

 


Not(in=zr,out=z1);                    //load ofPC
Not(in=ng,out=n1);
And(a=instruction[1],b=zr,out=l1);
And(a=instruction[2],b=ng,out=l2);
And(a=instruction[0],b=z1,out=l3dash);
And(a=n1,b=l3dash,out=l3);
And(a=instruction[0],b=instruction[1],out=l4dash);
And(a=l4dash,b=instruction[2],out=l4);
Or(a=l1,b=l2,out=t1);
Or(a=l3,b=l4,out=t2);
Or(a=t1,b=t2,out=T1);
And(a=instruction[15],b=T1,out=LOAD);
Not(in=LOAD,out=L);
	                                //Load of PC



PC(in=outA,load=LOAD,inc=L,reset=reset,out[0..14]=pc); //PC

}







